#!/usr/bin/python
# Copyright (c) Members of the EGEE Collaboration. 2004. 
# See http://www.eu-egee.org/partners/ for details on the copyright
# holders.  
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
#
#     http://www.apache.org/licenses/LICENSE-2.0 
#
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.

# plugin for gip framework.  generates Glue values associated
# with the scheduler, like FreeSlots or *ResponseTime

import sys
import os
import getopt
import string

from DynamicSchedulerGeneric import Analyzer
from DynamicSchedulerGeneric import GLUE1Handler
from DynamicSchedulerGeneric import GLUE2Handler
from DynamicSchedulerGeneric import Utils as DynSchedUtils

GLUE1FORMAT = 1
GLUE2FORMAT = 2
BOTHFORMAT = 3


def usage():
    print "Usage: lcg-info-dynamic-scheduler -c <cfg_file>"

def abort_without_output(msg):
    #
    # TODO log error
    #
    sys.exit(2)


def main():

    try:
        opts, args = getopt.getopt(sys.argv[1:], "c:", ["config="])
    except getopt.GetoptError:
        usage()
        abort_without_output("Error parsing command line")

    cfgfile = None

    for opt_name, opt_arg in opts:
        if opt_name in ("-c", "--config"):
            cfgfile = opt_arg
        
    if not cfgfile:
        usage()
        abort_without_output("No config file specified.")
    
    config = None
    try:
        config = DynSchedUtils.readConfigurationFromFile(cfgfile)
    except Exception, config_error:
        abort_without_output("While parsing config file %s: %s" % (cfgfile, repr(config_error)))
    
    outputformat = BOTHFORMAT
    if config.has_option('Main','outputformat'):
        tmps = config.get('Main','outputformat').lower().strip()
        if tmps == "glue1":
            outputformat = GLUE1FORMAT
        elif tmps == "glue2":
            outputformat = GLUE2FORMAT
        elif tmps <> "both":
            abort_without_output("Wrong argument outputformat: " + tmps)
    

    mjobTable = DynSchedUtils.getMaxJobsTable(config)
    collector = Analyzer.analyze(config, mjobTable)

    if outputformat & GLUE1FORMAT:
        GLUE1Handler.process(config, collector)
    
    if outputformat & GLUE2FORMAT:
        GLUE2Handler.process(config, collector)

if __name__ == "__main__":
    main()
